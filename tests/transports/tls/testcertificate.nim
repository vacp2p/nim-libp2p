import unittest2

import ../../../libp2p/transports/tls/certificate
import ../../../libp2p/crypto/crypto
import ../../../libp2p/peerid

func publicKey*(cert: P2pCertificate): PublicKey =
  return PublicKey.init(cert.extension.publicKey).get()

func peerId*(cert: P2pCertificate): PeerId =
  return PeerId.init(cert.publicKey()).tryGet()

suite "Certificate roundtrip tests":
  test "generate then parse with DER ecoding":
    let schemes = @[Ed25519, Secp256k1, ECDSA]
    for scheme in schemes:
      var rng = newRng()
      let keypair = KeyPair.random(scheme, rng[]).tryGet()
      let peerId = PeerId.init(keypair.pubkey).tryGet()

      let certTuple = generate(keypair, EncodingFormat.DER)
      let cert = parse(certTuple.raw)

      check peerId == cert.peerId()
      check cert.publicKey().scheme == scheme
      check cert.verify()

## Test vectors from https://github.com/libp2p/specs/blob/master/tls/tls.md#test-vectors.
suite "Test vectors":
  test "ECDSA Peer ID":
    let certBytesHex =
      "308201f63082019ca00302010202081052b953fab8f4be300a06082a8648ce3d040302301e311c301a06035504051313313931333134363939343730373431363038313020170d3235303332303130333033305a180f32313235303232343131333033305a301e311c301a06035504051313313931333134363939343730373431363038313059301306072a8648ce3d020106082a8648ce3d03010703420004c2fc1d082c85b90d8a82413b9b34f9c9c5f93f79e6d1eb954b5fdfe41b26fc9a4c44f32844eb40be9b4728a59ec966816a5394d3a0c1f06334b6debecb36f0aea381c13081be3081bb060a2b0601040183a25a01010481ac3081a9045f0803125b3059301306072a8648ce3d020106082a8648ce3d03010703420004d287ad3dc5c97884b7ab987b660efc2aa8cde7f9814e0fb3a8a005bfd8cd4a6cd2fd961d3e2013256b5b59e1ca6c9e7e48febfb1ed90cd092ef24aa0ae2d0dc404463044022021e1ccaf2f3c77fde5ada1242b830e7a5c1ab25956ac5edbca4904ec47a09479022051884dbdda561b545abf3fe391341898a4b4ceccccb83507b445ed36a6b2eedc300a06082a8648ce3d040302034800304502200f0fd126fb521ef8543655ccd3c32b1df34be8eb61ba4d30a04eebdb2870f2b0022100e97a637a3e702f360b45eb7567647c6a46f9d2a53291332a89898f3d84afc24e"
    let cert = parse(fromHex(certBytesHex))

    check $cert.peerId() == "Qmf5QwyriEdqphhFWkFJsmfY4Sgsj5Cq47VTa5RAboELhM"
    check cert.publicKey().scheme == PKScheme.ECDSA
    check cert.verify()

  test "RSA Peer ID":
    let certBytesHex =
      "308203843082032ba00302010202082b49903cfb5a68b0300a06082a8648ce3d040302301e311c301a06035504051313313639333433353539333630383635363737383020170d3235303332303130333033305a180f32313235303232343131333033305a301e311c301a06035504051313313639333433353539333630383635363737383059301306072a8648ce3d020106082a8648ce3d03010703420004acd28cfbbf5237aaa6f72ce3ab6b6ab790fe0788726bb3c39f9256341f786b73f171f385256e40fb60446cd56d832c655bf5e8ff00072edf349970ee9f34e617a382024f3082024b30820247060a2b0601040183a25a010104820237308202330482012b080012a60230820122300d06092a864886f70d01010105000382010f003082010a0282010100b36d3e34b063a8995698b0b60306288512cb54b173a6bb63c29507e2c7dc26f4af8662ca699899e0972911217b80b5f557210e34f83d622242b099e1311f2446c28a2bfea477d65eed6e1f903f276e78f24cf4375955f1bba6d1bdad81d6857cbb52c20060047af919e4b0f58d60e80cb548d3957e353afc3b4bc5164c3d96acb0d709f411820e065fa9194d4fe3641ee5c2a4c565c8deec3e27f121e01c74c0ee6fb711f6dbdd1256d5f092dd8b23b1ea508c3867a31d2e0cae6bfb426167193d19026e2c52b0c903d1bd5c553721920a0bd5fa6f145ab4157822a28c24704fe51d03f61bf4baa34b0d063b0df25703eee3fb2c8399271b1a6e58dbd4ea3c7102030100010482010082a2a37337b7e3f9fe84029fc420d0874305efb84299d471b4356f114c3bc2df7d4f4cd19b046da89afc7506956d0a93c58336bcbf05aaafe69f38356765824e4e701797059745da88644bf1f3f3a6d04c23326ac104115b5f49144acb5b6f6ce8be3fea7d9d1cd94c7a03f751d8aaf9ca0c5cd7355174debcc52e7b8c06b515adee53346bf8e7e91b641fa12d2ec44000a6c531300a25d6aed13cd66057bf6aebc62d30da92ec269c31dbd678990e2ae80de45a1f98788213049afcee3dad47e8b55fd69e63dc910794e421f51bbfa6b5e2e400dbcabc75766619bcdadeba84ecaf88a82fa1781bf159ceec08f8fba0f222aae99759c1212ff64ea810297240300a06082a8648ce3d0403020347003044021f7ca991bb69c6bf55e702cfedcc765d9991b3b524cdf13e99ce2f7c3ec12ecd022100a0688fb3b08d12a1e08c8bb0808eebfce967d691d963e49a9ce33b22b14fc249"
    let cert = parse(fromHex(certBytesHex))

    check $cert.peerId() == "QmYdE1tqDdojK4Q5XaXS34ghpDiav9DRpD16zd41y3DTWz"
    check cert.publicKey().scheme == PKScheme.RSA
    check cert.verify()

  test "Ed25519 Peer ID":
    let certBytesHex =
      "308201b030820156a00302010202081ef0074922d196fd300a06082a8648ce3d040302301e311c301a06035504051313343337323333323535383639393632313939323020170d3235303332303130333033305a180f32313235303232343131333033305a301e311c301a06035504051313343337323333323535383639393632313939323059301306072a8648ce3d020106082a8648ce3d03010703420004799542bfc7bfb7506ecd6d78857796b30e4127c44716fc2caa40922cc578ec9367e5b748c748a3ae576786b9fddeca36f40f2cc883b101e937511bff41ab5232a37c307a3078060a2b0601040183a25a0101046a3068042408011220970ec193ab5f6c556009767d5cdc0477d257807b41468a6f2007b40f03034fc70440db02949ac1e19fa61632baafa30d565eca7c12e84f0fc4341ade332b5ccbac60640fdc59213399d913e6c3c0f1111f92f66f04ee20cfe8f16cecfb7b5ee59205300a06082a8648ce3d040302034800304502203d33964353d80f393415c993a6462d47c7dacc38147ee445953019786ea7b66d022100a693ade35c4edb786bdb0bd09f1cb0c9a5b0bc6b61a97b639b4e3334371e10aa"
    let cert = parse(fromHex(certBytesHex))

    check $cert.peerId() == "12D3KooWKz2nHY8tmcX7ziGsF3gBoUZVvCXcmkvn86DaBsGktZfc"
    check cert.publicKey().scheme == PKScheme.Ed25519
    check cert.verify()

  test "Secp256k1 Peer ID":
    let certBytesHex =
      "308201b83082015fa003020102020831c14b384686f89a300a06082a8648ce3d040302301e311c301a06035504051313313435373936393932373437313131393132373020170d3235303332303130333033305a180f32313235303232343131333033305a301e311c301a06035504051313313435373936393932373437313131393132373059301306072a8648ce3d020106082a8648ce3d03010703420004e5da66e6dc811fef90f2b7a77ec92f8f7a96942899dc31ce649058cff9f9504cbe2c70212b616daef3fb52afa7d75b1c7880f48fdf0565cb7809ffb656b3b540a38184308181307f060a2b0601040183a25a01010471306f04250802122102d5dd09fddbcc150de9cb92e1777d7712ba0e20f526c7a842cc5f134a966cda780446304402202ece49e25a4b743f6965c70fd7c6efcf9101909a12fe81f2df98a5fcc203e49b02206e16a72fa8d1375d6117db99a960c324fe02f54d0853ecc19dda23a4f40949f0300a06082a8648ce3d0403020347003044022022587f895d257d5cf66da1d1c3627910b858443cb887f405e1948dc3e55d80b902200e2f07b93a2e4a487bb4bc721e9431ae723f921d91f84a875758d787c4302fa8"
    let cert = parse(fromHex(certBytesHex))

    check $cert.peerId() == "16Uiu2HAm9pWJoENCPfqs3NxD58ujsoi8PNAVpDDJxfbuVHSWj1VZ"
    check cert.publicKey().scheme == PKScheme.Secp256k1
    check cert.verify()

  test "Invalid certificate signature":
    let certBytesHex =
      "308201f83082019da00302010202081d051a136acdc4ea300a06082a8648ce3d040302301e311c301a06035504051313333037373732313536373332393634323238363020170d3235303332303130333830395a180f32313235303232343131333830395a301e311c301a06035504051313333037373732313536373332393634323238363059301306072a8648ce3d020106082a8648ce3d030107034200043168c3c9c49ec956c48446b64cc9c2c3d19eb7292ec8410ab9db14bef4946e5d14372ff5ae437b66b2fc724180bafeb8424a7bd4e119a02fcbbbabe039d9e6d7a381c23081bf3081bc060a2b0601040183a25a01010481ad3081aa045f0803125b3059301306072a8648ce3d020106082a8648ce3d03010703420004570acac25ebaaf7cc97c83858bff4c1bec26c9fdeb001b443c08cf26aee887099b36b73fa1aab6b3f729d8e9d8a7b789b5addcb79064769722a0da54cb4ceee804473045022100c253946d4c212698afb92095fdf281611f3fe7088f6cc1ccc71950509558459202206213b2c8fd07d53dc4554c54403116cb9d780d2fdd5b05c4447f1f187dbd26b6300a06082a8648ce3d0403020349003046022100c942bba92a2f3a1f639ae20c1c20e3bbea0f69d45c0ca67411a67c5ec71745f4022100896af401d8d137db9d075cb949b26c5808543540f3cf823352f53e920b5c7d55"
    let cert = parse(fromHex(certBytesHex)) # should parse correctly

    # should have key
    check $cert.peerId() == "QmbwMBgFtbyRgLNmwXUSvksUh18wUQpTfrv1aFobXwrmrT"
    check cert.publicKey().scheme == PKScheme.ECDSA

    # should not verify
    check not cert.verify()
