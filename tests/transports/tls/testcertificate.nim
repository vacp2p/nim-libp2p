import unittest2

import times
import ../../../libp2p/transports/tls/certificate
import ../../../libp2p/crypto/crypto
import ../../../libp2p/peerid

suite "Certificate roundtrip tests":
  test "generate then parse with DER ecoding":
    let schemes = @[Ed25519, Secp256k1, ECDSA]
    for scheme in schemes:
      var rng = newRng()
      let keypair = KeyPair.random(scheme, rng[]).tryGet()
      let peerId = PeerId.init(keypair.pubkey).tryGet()

      let certX509 = generateX509(keypair, encodingFormat = EncodingFormat.DER)
      let cert = parse(certX509.certificate)

      check peerId == cert.peerId()
      check cert.publicKey().scheme == scheme
      check cert.verify()

  test "gnerate with invalid validity time":
    var rng = newRng()
    let keypair = KeyPair.random(Ed25519, rng[]).tryGet()

    # past
    var validFrom = (now() - 3.days).toTime()
    var validTo = (now() - 1.days).toTime()
    var certX509 = generateX509(keypair, validFrom, validTo)
    var cert = parse(certX509.certificate)
    check not cert.verify()

    # future
    validFrom = (now() + 1.days).toTime()
    validTo = (now() + 3.days).toTime()
    certX509 = generateX509(keypair, validFrom, validTo)
    cert = parse(certX509.certificate)
    check not cert.verify()

    # twisted from-to
    validFrom = (now() + 3.days).toTime()
    validTo = (now() - 3.days).toTime()
    certX509 = generateX509(keypair, validFrom, validTo)
    cert = parse(certX509.certificate)
    check not cert.verify()

## Test vectors are equivalents to https://github.com/libp2p/specs/blob/master/tls/tls.md#test-vectors.
## Since certificates in those don't have Issuer and Subject, they are empty,
## they are not successfully parsed by parse(...) because those rules are enforced by Mbed TLS.
suite "Test vectors":
  test "ECDSA Peer ID":
    let certBytesHex =
      "3082021d308201c3a0030201020210030a3d9ec63fa9699d9786225333e2e6300a06082a8648ce3d040302301431123010060355040a13096c69627032702e696f301e170d3235303331393131353433315a170d3335303331373131353433315a301431123010060355040a13096c69627032702e696f3059301306072a8648ce3d020106082a8648ce3d0301070342000443cb7e0ad4550054ce8aef3871ff1183280a801f359a62449e742616d4859acbf90e4c3549e91d30343d934d6c7ed5177fda747b05450109ac0c2bed4b774961a381f63081f3300e0603551d0f0101ff0404030205a030130603551d25040c300a06082b06010505070301300c0603551d130101ff040230003081bd060a2b0601040183a25a01010481ae3081ab045f0803125b3059301306072a8648ce3d020106082a8648ce3d03010703420004e4314d7937c72ffe3e32c86bf01ce5dbbba97f51b3ba1b92988dc055134e67192cc7c4a72957efc81ca1d6842568424661f51d645cf188b49dcb378ab2f3ad8804483046022100b7a863233201ee58c55303e3a295debb4494215fadf9fdae8d673ec77fdc9248022100c622e11fc3f22d7ab6b3fbdb2b4fcdc20ded5cf63903c4a203b28418ea8eee41300a06082a8648ce3d0403020348003045022100ca7a345bdb1c9729e741d34871ef68150f8cd4727d3328a9c45401e201bbc0350220712fc0a3ec3fca0e50d001049a0a4114d957ae111f4c911c3e54360d80aa7119"
    let cert = parse(fromHex(certBytesHex))

    check $cert.peerId() == "QmPt7GAt6b4cJE8qYWYUvBkSPxmhsVoqkSnbtkoKw8rsKr"
    check cert.publicKey().scheme == PKScheme.ECDSA
    check cert.verify()

  test "RSA Peer ID":
    let certBytesHex =
      "308203ab30820351a003020102021100c45fe6bdaa7f858ae9010f034eebf23a300a06082a8648ce3d040302301431123010060355040a13096c69627032702e696f301e170d3235303331393131353433315a170d3335303331373131353433315a301431123010060355040a13096c69627032702e696f3059301306072a8648ce3d020106082a8648ce3d030107034200048b835a7e40731d2a19bb78ccce4bb856148f35f9d94c2ca76fd802e42a6f4967bc5ab759747febef5257105fefdb5c3bd831471ff09679147629f7b98e955ef8a38202823082027e300e0603551d0f0101ff0404030205a030130603551d25040c300a06082b06010505070301300c0603551d130101ff0402300030820247060a2b0601040183a25a010104820237308202330482012b080012a60230820122300d06092a864886f70d01010105000382010f003082010a0282010100be68dbf6581a77d78c27a8d3f743e8e0c63bd120b5afa97e66acecd3e6c34309ffeab0df899e0557b927ce52e6c9759561139d56c7ee09dc61bad52719fadc61266fabcd2ea8d7958f7a8f4cb978d9f843ae8200127fdc2392534f5932e3cd03f62c777b23fe7b382708eea6cc01f5f618e47f347ba26b3f798d93cacda7f1c08acdfea93b616957c9318bad1fbee5bcb082b4c9bf52c03c02ed6825243f2aeb5ecdf421d18fa09f7dc9954ab5294a002927d1dd282c51c676c6107dcaa2c46f94fa8829ced7dd8a08d650a60559b5c09c3f01ce333e08dcbc82953a3930ed5da566c8dee5f8a4da32a1136f1e72ea7b8c285ed847917d4098aa7b7f69e6f97302030100010482010015f51f63fdb649a4ee756195fc21d3498e76d7c3f4e4001637990c6bcd38acfc7c0d2eefa2dce24f38993c18cc17e7cf4902a2ac5b7c124b3f562cc3965502312f1a23d93f9dc10b5bd0f589ef922ca540249389cc52e148a4e0a1cf993ca3c9a347e1f0c119cbd5fa99df67e5cb33a1f44c06c39c17d1cc8b213156b6bc3bd9c787f52cfecb37e2a87df4b65d84c8961b16ce502df2b324290539c347fbc8a6011b309fc7901bbdeafa8bd21c4b2026930cd953d1d9d71320b49e3a4bee67b7ff457435808231c18d80469dacb1b51ebfb9dc9fa276f843fd820b6c76d6e9babd113f58bec25498269393c1c94fe6252e0efe8dc14560db1d207a6fad9df013300a06082a8648ce3d0403020348003045022027d5507d7663f7cba18abb2c7b1ab48ea2cdaaf57bbd0df692042c87e42d285a022100b049a8f7510eeff76e87a239e4a2d8e63f69d0efde003a969515195efe306759"
    let cert = parse(fromHex(certBytesHex))

    check $cert.peerId() == "QmSRYjW2NDJnZZU8C75vUNWSWane11Vjj1y4RUasymvD5w"
    check cert.publicKey().scheme == PKScheme.RSA
    check cert.verify()

  test "Ed25519 Peer ID":
    let certBytesHex =
      "308201d83082017ea003020102021100a488d437a726243f2f3933fb76ac1260300a06082a8648ce3d040302301431123010060355040a13096c69627032702e696f301e170d3235303331393131353433315a170d3335303331373131353433315a301431123010060355040a13096c69627032702e696f3059301306072a8648ce3d020106082a8648ce3d0301070342000408cb1e75b43c328b0c68b732cce1264aeaba43691a02b49af3cdb255b2832b10882aeb0cc2579ebc8750a15ae93c96be04c8a3ed11811ba90edc4cd2186a7b5ba381b03081ad300e0603551d0f0101ff0404030205a030130603551d25040c300a06082b06010505070301300c0603551d130101ff040230003078060a2b0601040183a25a0101046a3068042408011220964412b781912b2cac807b9731d30201c0c17fccaf15363bf03458b4ed37b9120440fa19f2c89aed436e07ef860dc37a16e538b2714d4fbc95f2470d680bf04319de942108a7c61a23b8112715dd6a5db7846e0d8e2dfc0a11069f6691f0d4fa2c0c300a06082a8648ce3d040302034800304502210097c3c6887c2f4f4747f51a969e104ee3b66d4518bb42adeba13657954bc482b10220613a0a8726ef3c5453e1fe19a2e6fbb8cf6674c9d9480d210655b5416b57a939"
    let cert = parse(fromHex(certBytesHex))

    check $cert.peerId() == "12D3KooWKvwXZNS7Rabb9xZgscwidxjkCh6GgJCxvaYc2UekmKGu"
    check cert.publicKey().scheme == PKScheme.Ed25519
    check cert.verify()

  test "Secp256k1 Peer ID":
    let certBytesHex =
      "308201dd30820184a00302010202102c9f34881912e91d916c813673fc268a300a06082a8648ce3d040302301431123010060355040a13096c69627032702e696f301e170d3235303331393131353433315a170d3335303331373131353433315a301431123010060355040a13096c69627032702e696f3059301306072a8648ce3d020106082a8648ce3d03010703420004accc9a0f5852fd73b02ec880c4cb2076cd37440ae24aee1eb4b3116311215f9ba0a3d86a4b12dbf04f0a08e8f4dd2cc0f515bcb86e4653e991e2f0efc0365886a381b73081b4300e0603551d0f0101ff0404030205a030130603551d25040c300a06082b06010505070301300c0603551d130101ff04023000307f060a2b0601040183a25a01010471306f0425080212210378067cceac4ac01ce5b03758ce4de591cec37080e434c3dd5e1cc62cd6da2831044630440220544b670a9d92b262714317f7f20f6afbd910d1573584fb672b0714bc2b8b195e02203d832f7f308e03a5a4d33fc4866af2044e9c69c459478ffb32b55ba7e7fad2a9300a06082a8648ce3d0403020347003044022048f1495b10b0ffcd8590600663bd63f7585b40c5f25ea65256e83410f3b12c6002202a37ba56922f953444e1128839a6c64681edcab6107b6fdc8e8a36172a95f842"
    let cert = parse(fromHex(certBytesHex))

    check $cert.peerId() == "16Uiu2HAmLjX1eVhPDcu5UX7iMprQGHdn3iVqebE9Qe4R5LScDCPz"
    check cert.publicKey().scheme == PKScheme.Secp256k1
    check cert.verify()

  test "Invalid certificate signature":
    let certBytesHex =
      "3082021d308201c3a00302010202107f3d6f4349b6e7eb3b1bb66fff5046b8300a06082a8648ce3d040302301431123010060355040a13096c69627032702e696f301e170d3235303331393134333631355a170d3335303331373134333631355a301431123010060355040a13096c69627032702e696f3059301306072a8648ce3d020106082a8648ce3d03010703420004df3a5d51c593489f59301eb4363618ba87c47f8bbbaec04af98d5fb94f3e15fff2abc41cc14a85b765df1b83d56feae524abfd9ad85e1e2805f06fc2f9794e72a381f63081f3300e0603551d0f0101ff0404030205a030130603551d25040c300a06082b06010505070301300c0603551d130101ff040230003081bd060a2b0601040183a25a01010481ae3081ab045f0803125b3059301306072a8648ce3d020106082a8648ce3d03010703420004534e5755014446ff4077c66addc4ac71be602d146d5d709a8c476a94a680b7e3355a17b95eda49c19740b90dcfb929e1e537ec8146acfcaa731b1b84c1ffdd83044830460221009f599024ebec5e4002c63878e6ba84f98fc968f2d635539524b7161b4ad31752022100bf5dd3b475e84c2192bee0a94ba41751f846b2715fa2f2ec51443dd89bed37f1300a06082a8648ce3d040302034800304502202362f3821760ed19d8ecb6c2c98e272e36728e2f9b74c80dfb44f4b6a4bca7ac022100dfbf9c66a75fdb91aa4215c5dbb6a560b81dcc3ebf7e4ef414cfbe04a8f3e5ee"
    let cert = parse(fromHex(certBytesHex)) # should parse correctly

    # should have valid key
    check $cert.peerId() == "QmPQwJ5aQa22kq97MbMcZGrDaBa7LxhHBuxD2SYBgy5Yrv"
    check cert.publicKey().scheme == PKScheme.ECDSA

    # should not verify
    check not cert.verify()

  test "Expired certificate":
    let certBytesHex =

    let cert = parse(fromHex(certBytesHex))

    # should have valid key
    check $cert.peerId() == "12D3KooWJzVFWVhithaej9Qr7NjJFBbjDDyBGSQsqF1sasCBcXAH"
    check cert.publicKey().scheme == PKScheme.Ed25519

    # should not verify
    check not cert.verify()

suite "utilities test":
  test "parseCertTime":
    var dt = parseCertTime("Mar 19 11:54:31 2025 GMT")
    check 1742385271 == dt.toUnix()

    dt = parseCertTime("Jan  1 00:00:00 1975 GMT")
    check 157766400 == dt.toUnix()
